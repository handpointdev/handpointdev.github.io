"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5389],{3905:(e,t,a)=>{a.d(t,{Zo:()=>o,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),p=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},o=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),u=p(a),k=r,c=u["".concat(d,".").concat(k)]||u[k]||m[k]||i;return a?n.createElement(c,l(l({ref:t},o),{},{components:a})):n.createElement(c,l({ref:t},o))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=u;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9910:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:8,id:"androideventlisteners"},l="Events Listeners",s={unversionedId:"androideventlisteners",id:"version-Android SDK 6.7.4/androideventlisteners",title:"Events Listeners",description:"All",source:"@site/android_versioned_docs/version-Android SDK 6.7.4/androideventlisteners.md",sourceDirName:".",slug:"/androideventlisteners",permalink:"/android/androideventlisteners",draft:!1,tags:[],version:"Android SDK 6.7.4",sidebarPosition:8,frontMatter:{sidebar_position:8,id:"androideventlisteners"},sidebar:"tutorialSidebar",previous:{title:"Events Subscribers",permalink:"/android/androideventsubscribers"},next:{title:"Objects",permalink:"/android/androidobjects"}},d={},p=[{value:"All",id:"all",level:2},{value:"Basic",id:"basic",level:2},{value:"Card Brand Display",id:"cardBrandDisplay",level:2},{value:"Connection status changed",id:"connectionStatusChanged",level:2},{value:"Current transaction status",id:"14",level:2},{value:"Device capabilities ready",id:"deviceCapabilitiesReady",level:2},{value:"Device discovery finished",id:"deviceDiscoveryFinished",level:2},{value:"End of transaction",id:"16",level:2},{value:"Hardware status changed",id:"hardwareStatusChanged",level:2},{value:"Log",id:"log",level:2},{value:"MessageHandling",id:"messageHandling",level:2},{value:"On message logged",id:"onMessageLogged",level:2},{value:"PhysicalKeyboardEvent",id:"physicalKeyboardEvent",level:2},{value:"PendingResults",id:"pendingResults",level:2},{value:"PaymentProvider",id:"paymentprovider",level:2},{value:"PrinterEvents",id:"printerEvents",level:2},{value:"Report result",id:"reportResult",level:2},{value:"Required",id:"42",level:2},{value:"Signature required",id:"15",level:2},{value:"Status",id:"status",level:2},{value:"Transaction result ready",id:"transactionResultReady",level:2},{value:"Transaction started",id:"transactionStarted",level:2}],o={toc:p};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"events-listeners"},"Events Listeners"),(0,r.kt)("h2",{id:"all"},"All"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.All")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"An interface which needs to be implemented and added as a listener to receive all available events."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Extends")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#42"},(0,r.kt)("inlineCode",{parentName:"a"},"Required"))," ",(0,r.kt)("a",{parentName:"p",href:"#log"},(0,r.kt)("inlineCode",{parentName:"a"},"Log"))," ",(0,r.kt)("a",{parentName:"p",href:"#status"},(0,r.kt)("inlineCode",{parentName:"a"},"Status"))," ",(0,r.kt)("a",{parentName:"p",href:"#pendingResults"},(0,r.kt)("inlineCode",{parentName:"a"},"PendingResults"))," ",(0,r.kt)("a",{parentName:"p",href:"#reportResult"},(0,r.kt)("inlineCode",{parentName:"a"},"ReportResult"))," ",(0,r.kt)("a",{parentName:"p",href:"#printerEvents"},(0,r.kt)("inlineCode",{parentName:"a"},"PrinterEvents"))," ",(0,r.kt)("a",{parentName:"p",href:"#transactionStarted"},(0,r.kt)("inlineCode",{parentName:"a"},"TransactionStarted"))," ",(0,r.kt)("a",{parentName:"p",href:"#messageHandling"},(0,r.kt)("inlineCode",{parentName:"a"},"MessageHandling"))," ",(0,r.kt)("a",{parentName:"p",href:"#physicalKeyboardEvent"},(0,r.kt)("inlineCode",{parentName:"a"},"PhysicalKeyboardEvent"))," ",(0,r.kt)("a",{parentName:"p",href:"#cardBrandDisplay"},(0,r.kt)("inlineCode",{parentName:"a"},"CardBrandDisplay"))),(0,r.kt)("h2",{id:"basic"},"Basic"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.Basic")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"An interface which needs to be implemented and added as a listener to receive basic events."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Extends")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#42"},(0,r.kt)("inlineCode",{parentName:"a"},"Required"))," ",(0,r.kt)("a",{parentName:"p",href:"#log"},(0,r.kt)("inlineCode",{parentName:"a"},"Log"))," ",(0,r.kt)("a",{parentName:"p",href:"#status"},(0,r.kt)("inlineCode",{parentName:"a"},"Status"))," ",(0,r.kt)("a",{parentName:"p",href:"#pendingResults"},(0,r.kt)("inlineCode",{parentName:"a"},"PendingResults"))," ",(0,r.kt)("a",{parentName:"p",href:"#reportResult"},(0,r.kt)("inlineCode",{parentName:"a"},"ReportResult"))," "),(0,r.kt)("h2",{id:"cardBrandDisplay"},"Card Brand Display"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.CardBrandDisplay")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"An interface which needs to be implemented and added as a listener to get events providing information on the supported card brands and/or the card brand used during the transaction."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Methods")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"deviceCapabilities( List supportedCardBrands );")," "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"supportedCardBrands")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null),(0,r.kt)("em",{parentName:"td"},"List")),(0,r.kt)("td",{parentName:"tr",align:null},"A list containing the supported card brands")))),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"readCard( CardBrands usedCard );")," "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"usedCard")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null),(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#cardBrands"},(0,r.kt)("em",{parentName:"a"},"CardBrands"))),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the card brand")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Code example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public final class EventHandler implements Events.CardBrandDisplay {\n\n    @Override\n    public void deviceCapabilities(List supportedCardBrands) {\n        // Get supported card brands \n    }\n\n    @Override\n    public void readCard(CardBrands usedCard) {\n        // Get the used card brand \n    }\n\n}\n\n// Remember to register the instance of this EventHandler:\nthis.api.registerEventsDelegate(eventHandlerInstance);\n")),(0,r.kt)("h2",{id:"connectionStatusChanged"},"Connection status changed"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.ConnectionStatusChanged")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"Implement this interface in order to receive connection status changes."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Methods")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"connectionStatusChanged( ConnectionStatus status , Device device );")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"status")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null),(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#connection-status"},(0,r.kt)("em",{parentName:"a"},"ConnectionStatus"))),(0,r.kt)("td",{parentName:"tr",align:null},"New status of the connection")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"device")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null),(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#17"},(0,r.kt)("em",{parentName:"a"},"Device"))),(0,r.kt)("td",{parentName:"tr",align:null},"The terminal which sent this information.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Code example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public final class EventHandler implements Events.ConnectionStatusChanged {\n\n    @Override\n    public void connectionStatusChanged(ConnectionStatus status, Device device) { ... }\n\n}\n\n// Remember to register the instance of this EventHandler:\nthis.api.registerEventsDelegate(eventHandlerInstance);\n")),(0,r.kt)("h2",{id:"14"},"Current transaction status"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.CurrentTransactionStatus")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"Implement this interface in order to receive events about the current transaction."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Methods")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"currentTransactionStatus( StatusInfo status , Device device );")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"status")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null),(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#status-info"},(0,r.kt)("em",{parentName:"a"},"StatusInfo"))),(0,r.kt)("td",{parentName:"tr",align:null},"The ",(0,r.kt)("strong",{parentName:"td"},"StatusInfo")," of the current transaction")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"device")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null),(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#17"},(0,r.kt)("em",{parentName:"a"},"Device"))),(0,r.kt)("td",{parentName:"tr",align:null},"The terminal the request is sent from.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Code example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public final class EventHandler implements Events.CurrentTransactionStatus {\n\n    @Override\n    public void currentTransactionStatus(StatusInfo info, Device device) { ... }\n\n}\n\n// Remember to register the instance of this EventHandler:\nthis.api.registerEventsDelegate(eventHandlerInstance);\n")),(0,r.kt)("h2",{id:"deviceCapabilitiesReady"},"Device capabilities ready"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.DeviceCapabilitiesReady")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"Implement this interface in case the payment terminal needs to notify the SDK of its capabilities"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Methods")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"deviceCapabilities( DeviceCapabilities capabilities , Device device );")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"capabilities")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null),(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#24"},(0,r.kt)("em",{parentName:"a"},"DeviceCapabilities"))),(0,r.kt)("td",{parentName:"tr",align:null},"The capabilities of the terminal")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"device")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null),(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#17"},(0,r.kt)("em",{parentName:"a"},"Device"))),(0,r.kt)("td",{parentName:"tr",align:null},"The terminal sending its capabilities")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Code example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public final class EventHandler implements Events.DeviceCapabilitiesReady {\n\n    @Override\n    public void deviceCapabilities(DeviceCapabilities capabilities, Device device) { ... }\n\n}\n\n// Remember to register the instance of this EventHandler:\nthis.api.registerEventsDelegate(eventHandlerInstance);\n")),(0,r.kt)("h2",{id:"deviceDiscoveryFinished"},"Device discovery finished"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.DeviceDiscoveryFinished")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"Implement this interface in order to receive a list of available payment terminals. The event handler defined in this interface is invoked after calling the method searchDevices"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Methods")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"deviceDiscoveryFinished( List<Device> devices );")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"devices")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null)," List ",(0,r.kt)("inlineCode",{parentName:"td"},"<Device>")),(0,r.kt)("td",{parentName:"tr",align:null},"A list of available devices.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Code example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public final class EventHandler implements Events.DeviceDiscoveryFinished {\n\n    @Override\n    public void deviceDiscoveryFinished(List<Device> devices) {\n        // Receiving a list of connectable payment terminals\n        foreach(Device device in devices) { ... }\n\n}\n\n// Remember to register the instance of this EventHandler:\nthis.api.registerEventsDelegate(eventHandlerInstance);\n")),(0,r.kt)("h2",{id:"16"},"End of transaction"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.EndOfTransaction")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"Implement this interface to receive an event when a transaction is complete."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Methods")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"dendOfTransaction( TransactionResult result , Device device );")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"result")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null),(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#25"},(0,r.kt)("em",{parentName:"a"},"TransactionResult"))),(0,r.kt)("td",{parentName:"tr",align:null},"Holds all the information about the transaction.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"device")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null),(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#17"},(0,r.kt)("em",{parentName:"a"},"Device"))),(0,r.kt)("td",{parentName:"tr",align:null},"The payment terminal.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Code example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public final class EventHandler implements Events.EndOfTransaction {\n\n    @Override\n    public void endOfTransaction(TransactionResult result, Device device) {\n        // Check the status of the transaction, save it, ...\n    }\n\n}\n\n// Remember to register the instance of this EventHandler:\nthis.api.registerEventsDelegate(eventHandlerInstance);\n")),(0,r.kt)("h2",{id:"hardwareStatusChanged"},"Hardware status changed"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.HardwareStatusChanged")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"Implement this interface in order to receive events when the hardware status changes."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Methods")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"hardwareStatusChanged( HardwareStatus status , Device device );")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"status")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required"),"  ",(0,r.kt)("br",null)," ",(0,r.kt)("em",{parentName:"td"},"HardwareStatus")),(0,r.kt)("td",{parentName:"tr",align:null},"New status of the hardware.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"device")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required"),"  ",(0,r.kt)("br",null),(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#17"},(0,r.kt)("em",{parentName:"a"},"Device"))),(0,r.kt)("td",{parentName:"tr",align:null},"The payment terminal.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Code example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public final class EventHandler implements Events.HardwareStatusChanged {\n\n    @Override\n    public void hardwareStatusChanged(HardwareStatus status, Device device) { ... }\n\n}\n\n// Remember to register the instance of this EventHandler:\nthis.api.registerEventsDelegate(eventHandlerInstance);\n")),(0,r.kt)("h2",{id:"log"},"Log"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.Log")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"An interface which needs to be implemented and added as a listener to receive logging information."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Extends")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#onMessageLogged"},(0,r.kt)("inlineCode",{parentName:"a"},"OnMessageLogged"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Code example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public final class EventHandler implements Events.Log {\n\n    @Override\n    public void deviceLogsReady(String logs, Device device) { ... }\n    @Override\n    public void onMessageLogged(LogLevel level , String message) { ... }\n\n}\n\n// Remember to register the instance of this EventHandler:\nthis.api.registerEventsDelegate(eventHandlerInstance);\n")),(0,r.kt)("h2",{id:"messageHandling"},"MessageHandling"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.MessageHandling")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"An interface which needs to be implemented and added as a listener to get events which are called when the sdk asks the application to display or hide a message."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Methods")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"showMessage( String message , Boolean dismissible , int duration );")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null)," ",(0,r.kt)("em",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"Message to display")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dismissible")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null)," ",(0,r.kt)("em",{parentName:"td"},"Boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"A flag that indicates whether the message can be dismissed")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"duration")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null)," ",(0,r.kt)("em",{parentName:"td"},"int")),(0,r.kt)("td",{parentName:"tr",align:null},"The timeout to hide the message. In milliseconds, if 0 is sent, the message should not auto dismiss.")))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"hideMessage( String message );")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null),(0,r.kt)("em",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"Message to hide")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Code example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public final class EventHandler implements Events.MessageHandling {\n\n    @Override\n    public void showMessage(String message, Boolean dismissible, int duration) {\n        // Show message for a 'duration' period (if duration = 0 DO NOT dismiss until hideMessage(String message) event is received) and make it dismissible if the input marks it as possible\n    }\n\n    @Override\n    public void hideMessage(String message) {\n        // Hide the message\n    }\n\n}\n\n// Remember to register the instance of this EventHandler:\nthis.api.registerEventsDelegate(eventHandlerInstance);\n")),(0,r.kt)("h2",{id:"onMessageLogged"},"On message logged"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.OnMessageLogged")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"Implement this interface to receive logs from the payment terminal.\n",(0,r.kt)("strong",{parentName:"p"},"Methods")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"onMessageLogged( LogLevel level , String message );")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"level")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required"),"  ",(0,r.kt)("br",null),(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#18"},(0,r.kt)("em",{parentName:"a"},"LogLevel"))),(0,r.kt)("td",{parentName:"tr",align:null},"The LogLevel of the logging")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required"),(0,r.kt)("br",null),(0,r.kt)("em",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"The log trace which was logged by the SDK.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Code example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public final class EventHandler implements Events.OnMessageLogged {\n\n    @Override\n    public void onMessageLogged(LogLevel level, String message) {\n        // Process log trace\n    }\n\n}\n\n// Remember to register the instance of this EventHandler:\nthis.api.registerEventsDelegate(eventHandlerInstance);\n")),(0,r.kt)("h2",{id:"physicalKeyboardEvent"},"PhysicalKeyboardEvent"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.PhysicalKeyboardEvent")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"An interface which needs to be implemented and added as a listener to get events coming from the PAX A80 physical keyboard."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Methods")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"onKeyPressed( PaxA80Keys key );")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"key")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required"),"  ",(0,r.kt)("br",null),(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#28"},(0,r.kt)("em",{parentName:"a"},"PaxA80Keys"))),(0,r.kt)("td",{parentName:"tr",align:null},"The name of the key that has been pressed")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Code example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public final class EventHandler implements Events.PhysicalKeyboardEvent {\n\n    @Override\n    public void onKeyPressed(String key) { ... }\n\n}\n\n// Remember to register the instance of this EventHandler:\nthis.api.registerEventsDelegate(eventHandlerInstance);\n")),(0,r.kt)("h2",{id:"pendingResults"},"PendingResults"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.PendingResults")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"An interface which needs to be implemented and added as a listener to receive information about pending TransactionResults. In case of a communication failure between the SDK and the payment terminal there might be a result pending from the transaction which did not get sent to the SDK."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Code example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public final class EventHandler implements Events.PendingResults {\n\n    @Override\n    public void transactionResultReady(TransactionResult transactionResult, Device device) { ... }\n\n}\n\n// Remember to register the instance of this EventHandler:\nthis.api.registerEventsDelegate(eventHandlerInstance);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Extends")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#transactionResultReady"},(0,r.kt)("inlineCode",{parentName:"a"},"TransactionResultReady"))),(0,r.kt)("h2",{id:"paymentprovider"},"PaymentProvider"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.PaymentProvider")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"An interface which needs to be implemented and added as a listener to receive all available events related to financial operations."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Extends")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#15"},(0,r.kt)("inlineCode",{parentName:"a"},"SignatureRequired"))," ",(0,r.kt)("a",{parentName:"p",href:"#16"},(0,r.kt)("inlineCode",{parentName:"a"},"EndOfTransaction"))," ",(0,r.kt)("a",{parentName:"p",href:"#onMessageLogged"},(0,r.kt)("inlineCode",{parentName:"a"},"OnMessageLogged"))," ",(0,r.kt)("a",{parentName:"p",href:"#14"},(0,r.kt)("inlineCode",{parentName:"a"},"CurrentTransactionStatus"))," "),(0,r.kt)("h2",{id:"printerEvents"},"PrinterEvents"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.PrinterEvents")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"An interface which needs to be implemented and added as a listener to get events coming from the printer."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Methods")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"printSuccess( );")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"printError(PrintError error);")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"error")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null),(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#29"},(0,r.kt)("em",{parentName:"a"},"PrintError"))),(0,r.kt)("td",{parentName:"tr",align:null},"Enum detailing the reason of the error")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Code example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public final class EventHandler implements Events.PrinterEvents {\n\n    @Override\n    public void printSuccess() {\n        // Successful print action\n    }\n\n    @Override\n    public void printError(PrintError error) {\n        // Unable to perform print action due to error\n    }\n\n}\n\n// Remember to register the instance of this EventHandler:\nthis.api.registerEventsDelegate(eventHandlerInstance);\n")),(0,r.kt)("h2",{id:"reportResult"},"Report result"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.ReportResult")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"Implement this interface to receive an event when a report result from a ",(0,r.kt)("a",{parentName:"p",href:"/android/next/androiddevicemanagement#getTransactionReport"},"getTransactionsReport")," is returned."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Methods")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"reportResult( TypeOfResult type , String report , DeviceStatus status , Device device );")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"type")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required"),"  ",(0,r.kt)("br",null),(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#30"},(0,r.kt)("em",{parentName:"a"},"TypeOfResult"))),(0,r.kt)("td",{parentName:"tr",align:null},"The type of the report")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"report")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null),(0,r.kt)("em",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"The text of the report")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"status")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required"),"  ",(0,r.kt)("br",null),(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#33"},(0,r.kt)("em",{parentName:"a"},"DeviceStatus"))),(0,r.kt)("td",{parentName:"tr",align:null},"The status of the device")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"device")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null),(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#17"},(0,r.kt)("em",{parentName:"a"},"Device"))),(0,r.kt)("td",{parentName:"tr",align:null},"The terminal sending the report")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Code example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public final class EventHandler implements Events.ReportResult {\n\n    @Override\n    public void reportResult(TypeOfResult type, String report, DeviceStatus status, Device device) { ... }\n\n}\n\n// Remember to register the instance of this EventHandler:\nthis.api.registerEventsDelegate(eventHandlerInstance);\n")),(0,r.kt)("h2",{id:"42"},"Required"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.Required")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"You must provide a class implementing this interface when initializing the SDK."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Code example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public final class EventHandler implements Events.Required {\n\n    @Override\n    public void signatureRequired(SignatureRequest signatureRequest, Device device) { ... }\n    @Override\n    public void endOfTransaction(TransactionResult transactionResult, Device device) { ... }\n    @Override\n    public void deviceDiscoveryFinished(List devices) { ... }\n    @Override\n    public void transactionResultReady(TransactionResult transactionResult, Device device) { ... }\n\n}\n\n// Remember to register the instance of this EventHandler:\nthis.api.registerEventsDelegate(eventHandlerInstance);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Events")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#deviceDiscoveryFinished"},(0,r.kt)("inlineCode",{parentName:"a"},"DeviceDiscoveryFinished"))," ",(0,r.kt)("a",{parentName:"p",href:"#15"},(0,r.kt)("inlineCode",{parentName:"a"},"SignatureRequired"))," ",(0,r.kt)("a",{parentName:"p",href:"#16"},(0,r.kt)("inlineCode",{parentName:"a"},"EndOfTransaction"))," ",(0,r.kt)("a",{parentName:"p",href:"#pendingResults"},(0,r.kt)("inlineCode",{parentName:"a"},"PendingResults"))),(0,r.kt)("h2",{id:"15"},"Signature required"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.SignatureRequired")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"The SignatureRequired interface must be implemented in order to receive an event when a card requires a signature as a verification method. This interface is only required for an Hilite integration, PAX and Telpo terminals automatically prompt for signature capture on the terminal."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Methods")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"signatureRequired( SignatureRequest request , Device device );")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"request")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null)," ",(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#signature-request"},(0,r.kt)("em",{parentName:"a"},"SignatureRequest"))),(0,r.kt)("td",{parentName:"tr",align:null},"Holds the signature request.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"device")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required"),(0,r.kt)("br",null),(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#17"},(0,r.kt)("em",{parentName:"a"},"Device"))),(0,r.kt)("td",{parentName:"tr",align:null},"The payment terminal.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Code example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public final class EventHandler implements Events.SignatureRequired {\n\n    @Override\npublic void signatureRequired(SignatureRequest signatureRequest, Device device) {\n        // Save merchant receipt\n        String merchantReceipt = signatureRequest.getMerchantReceipt();\n        api.signatureResult(true);\n    }\n\n}\n\n// Remember to register the instance of this EventHandler:\nthis.api.registerEventsDelegate(eventHandlerInstance);\n")),(0,r.kt)("h2",{id:"status"},"Status"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.Status")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"An interface which needs to be implemented and added as a listener to receive connection and transaction statuses."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Code example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public final class EventHandler implements Events.Status {\n\n    @Override\n    public void connectionStatusChanged(ConnectionStatus status, Device device) { ... }\n    @Override\n    public void hardwareStatusChanged(HardwareStatus status, Device device) { ... }\n    @Override\n    public void currentTransactionStatus(StatusInfo info, Device device) { ... }\n\n}\n\n// Remember to register the instance of this EventHandler:\nthis.api.registerEventsDelegate(eventHandlerInstance);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Extends")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#connectionStatusChanged"},(0,r.kt)("inlineCode",{parentName:"a"},"ConnectionStatusChanged"))," ",(0,r.kt)("a",{parentName:"p",href:"#hardwareStatusChanged"},(0,r.kt)("inlineCode",{parentName:"a"},"HardwareStatusChanged"))," ",(0,r.kt)("a",{parentName:"p",href:"#14"},(0,r.kt)("inlineCode",{parentName:"a"},"CurrentTransactionStatus"))),(0,r.kt)("h2",{id:"transactionResultReady"},"Transaction result ready"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.TransactionResultReady")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"Implement this interface in order to receive an event after a pending TransactionResult has been recovered from the payment terminal."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Methods")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"transactionResultReady( TransactionResult transactionResult , Device device );")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"transactionResult")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required"),"  ",(0,r.kt)("br",null),(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#25"},(0,r.kt)("em",{parentName:"a"},"TransactionResult"))),(0,r.kt)("td",{parentName:"tr",align:null},"A ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("em",{parentName:"strong"},"TransactionResult"))," is containing all information about the recovered transaction.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"device")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null),(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#17"},(0,r.kt)("em",{parentName:"a"},"Device"))),(0,r.kt)("td",{parentName:"tr",align:null},"The payment terminal.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Code example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public final class EventHandler implements Events.TransactionResultReady {\n\n    @Override\n    public void transactionResultReady(TransactionResult transactionResult, Device device) { ... }\n\n}\n\n// Remember to register the instance of this EventHandler:\nthis.api.registerEventsDelegate(eventHandlerInstance);\n")),(0,r.kt)("h2",{id:"transactionStarted"},"Transaction started"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Events.TransactionStarted")," ",(0,r.kt)("span",{class:"badge badge--info"},"Interface")),(0,r.kt)("p",null,"Implement this interface in order to receive an event when a transaction is started through the Cloud API channel."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"IMPORTANT NOTE"),": This interface is only available for cloud-enabled devices. See ",(0,r.kt)("a",{parentName:"p",href:"#deviceCapabilitiesReady"},"DeviceCapabilitiesReady")," interface."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Methods")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"transactionStarted( TransactionType transactionType , BigInteger amount , Currency currency );")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"transactionType")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null),(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#31"},(0,r.kt)("em",{parentName:"a"},"TransactionType"))),(0,r.kt)("td",{parentName:"tr",align:null},"Type of transaction started")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amount")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required"),"  ",(0,r.kt)("br",null),(0,r.kt)("em",{parentName:"td"},"BigInteger")),(0,r.kt)("td",{parentName:"tr",align:null},"Amount in the minor unit of currency (f.ex. 1000 is 10.00 GBP)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"currency")," ",(0,r.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,r.kt)("br",null),(0,r.kt)("a",{parentName:"td",href:"/android/next/androidobjects#13"},(0,r.kt)("em",{parentName:"a"},"Currency"))),(0,r.kt)("td",{parentName:"tr",align:null},"Currency of the transaction started")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Code example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public final class EventHandler implements Events.TransactionStarted {\n\n    @Override\npublic void transactionStarted(TransactionType type, BigInteger amount, Currency currency) {\n        // Notify the app user transaction has been started ...\n    }\n\n}\n\n// Remember to register the instance of this EventHandler:\nthis.api.registerEventsDelegate(eventHandlerInstance);\n")))}m.isMDXComponent=!0}}]);